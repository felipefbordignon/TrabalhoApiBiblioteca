package br.com.residencia.biblioteca.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.residencia.biblioteca.dto.EditoraDTO;
import br.com.residencia.biblioteca.entity.Editora;
import br.com.residencia.biblioteca.repository.EditoraRepository;

@Service
public class EditoraService {
	@Autowired
	EditoraRepository editoraRepository;

	public List<Editora> getAllEditoras() {
		return editoraRepository.findAll();
	}

	public List<EditoraDTO> getAllEditorasDTO() {
		List<Editora> listaEditora = editoraRepository.findAll();
		List<EditoraDTO> listaEditoraDTO = new ArrayList<>();
		return 
				
				/*// 1. Percorrer a lista de entidades Editora (chamada
	 * listaEditora) // 2. Na lista de entidade, pegar cada entidade existente nela
	 * // 3. Transformar cada entidade existente na lista em um DTO // 4. Adicionar
	 * cada DTO (que foi transformado a partir da entidade) na lista de // DTO // 5.
	 * Retornar/devolver a lista de DTO preenchida
	 * 
	 * // OBS: para converter a entidade no DTO, usar o metodo toDTO return */
	}

	public Editora getEditoraById(Integer id) {
		return editoraRepository.findById(id).orElse(null);
	}

//SAVE
	public Editora saveEditora(Editora editora) {
		return editoraRepository.save(editora);
	}

//SAVEDTO
	public EditoraDTO saveEditoraDTO(EditoraDTO editoraDTO) {
		Editora editora = toEntidade(editoraDTO);
		Editora novaEditora = editoraRepository.save(editora);

		EditoraDTO editoraAtualizadaDTO = toDTO(novaEditora);
		return editoraAtualizadaDTO;
	}

	private Editora toEntidade(EditoraDTO editoraDTO) {
		Editora editora = new Editora();
		editora.setNome(editora.getNome());
		return editora;
	}

	private EditoraDTO toDTO(Editora editora) {
		EditoraDTO editoraDTO = new EditoraDTO();
		editoraDTO.setCodigoEditora(editoraDTO.getCodigoEditora());
		editoraDTO.setNome(editoraDTO.getNome());
		return editoraDTO;
	}

//UPDATEDTO
	public EditoraDTO updateEditoraDTO(EditoraDTO editoraDTO, Integer id) {
		Editora editoraExistenteNoBanco = getEditoraById(id);

		EditoraDTO editoraAtualizadaDTO = new EditoraDTO();

		if (editoraExistenteNoBanco != null) {
			editoraExistenteNoBanco.setNome(editoraDTO.getNome());
			Editora editoraAtualizada = editoraRepository.save(editoraExistenteNoBanco);

			editoraAtualizadaDTO.setCodigoEditora(editoraAtualizada.getCodigoEditora());
			editoraAtualizadaDTO.setNome(editoraAtualizada.getNome());
		}
		return editoraAtualizadaDTO;
	}

//UPDATE
	public Editora updateEditora(Editora editora, Integer id) {

		Editora editoraExistenteNoBanco = getEditoraById(id);

		editoraExistenteNoBanco.setNome(editora.getNome());

		return editoraRepository.save(editoraExistenteNoBanco);

	}

//DELETE
	public Editora deleteEditora(Integer id) {
		editoraRepository.deleteById(id);
		return getEditoraById(id);
	}

}