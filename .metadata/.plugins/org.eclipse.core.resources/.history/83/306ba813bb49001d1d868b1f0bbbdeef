package br.com.residencia.biblioteca.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.residencia.biblioteca.dto.EditoraDTO;
import br.com.residencia.biblioteca.entity.Editora;
import br.com.residencia.biblioteca.repository.EditoraRepository;

@Service
public class EditoraService {
	@Autowired
	EditoraRepository editoraRepository;

	public List<Editora> getAllEditoras() {
		return editoraRepository.findAll();
	}
	/*
	 * public List<Editora> getAllEditorasDTO() { return
	 * editoraRepository.findAll(); }
	 */

	public Editora getEditoraById(Integer id) {
		return editoraRepository.findById(id).orElse(null);
	}

	public Editora saveEditora(Editora editora) {
		return editoraRepository.save(editora);

	}
				
	/*
	 * public EditoraDTO saveEditoraDTO(EditoraDTO editoraDTO) { Editora editora =
	 * new Editora(); editora.setNome(editoraDTO.getNome());
	 * 
	 * Editora novaEditora = editoraRepository.save(editora);
	 * 
	 * EditoraDTO novaEditoraDTO = new EditoraDTO();
	 * 
	 * novaEditoraDTO.setCodigoEditora(novaEditoraDTO.getCodigoEditora());
	 * novaEditoraDTO.setNome(novaEditoraDTO.getNome());
	 * 
	 * return novaEditoraDTO; }
	 */
	public EditoraDTO convertEntitytoDTO(Editora editora) {
		EditoraDTO editoraDTO = new EditoraDTO();
		
		if (editora.getCodigoEditora()==0||editora.getCodigoEditora()==null) {
			editoraDTO.setNome(editora.getNome());
		}
		else {
			editoraDTO.setNome(editora.getNome());
			editoraDTO.setCodigoEditora(editora.getCodigoEditora());
		}
		return editoraDTO;
	}
	
	public Editora convertDTOtoEntity(EditoraDTO editoraDTO) {
		Editora editora = new Editora();
		
		if (editoraDTO.getCodigoEditora()==0||editoraDTO.getCodigoEditora()==null) {
			editora.setNome(editora.getNome());
		}
		else {
			editora.setNome(editoraDTO.getNome());
			editora.setCodigoEditora(editoraDTO.getCodigoEditora());
		}
		return editora;
	}
	
	public List<EditoraDTO> getAllEditoraDTO(){
		List<Editora> listaEditora = getAllEditoras();
		List<EditoraDTO> listaDTO = new ArrayList<EditoraDTO>();
		for (int i=0; i<listaEditora.size();i++) {
			listaDTO.add(convertEntitytoDTO(listaEditora.get(i)));
		}	
		return listaDTO;
	}
	
	public EditoraDTO saveEditoraDTO (EditoraDTO editoraDTO) {
		//Implementacao NOVA
		Editora editora1 = convertDTOtoEntity(editoraDTO);
		Editora registroEditora = saveEditora(editora1);
		EditoraDTO editoraFinal = convertEntitytoDTO(registroEditora);
		return editoraFinal;
	}
	public Editora updateEditora(Editora editora, Integer id) {
		// Editora editoraExistenteNoBanco = editoraRepository.findById(id).get();

		Editora editoraExistenteNoBanco = getEditoraById(id);

		editoraExistenteNoBanco.setNome(editora.getNome());

		return editoraRepository.save(editoraExistenteNoBanco);

		// return editoraRepository.save(editora);
	}

	public Editora deleteEditora(Integer id) {
		editoraRepository.deleteById(id);
		return getEditoraById(id);
	}

}